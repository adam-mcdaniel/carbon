

start: _NEWLINE* (stmt _NEWLINE*)*
?stmt: (fn | assign | retval | value) _NEWLINE?
suite: stmt | _NEWLINE _INDENT _NEWLINE? stmt+ _DEDENT _NEWLINE?




fn: "def" name parameters ":" suite
assign: store "=" value
retval: "return" (value ",")* value




value: load
    | string
    | number
    | call
    | "(" value ")"

call: value arguments
arguments: "(" [value] ("," value)* ")"


load: name
store: name

name: (ident "::")* ident
string: STRING
number: NUMBER | FLOAT_NUMBER
ident: IDENTIFIER

parameters: "(" [ident] ("," ident)* ")"



NUMBER: /0|[1-9]\d*/i
FLOAT_NUMBER: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
IDENTIFIER: /[a-zA-Z_]\w*/

_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+
COMMENT: /\/\/[^\n]*/

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT
